//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `BackgroundColor`.
    static let backgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgroundColor")
    /// Color `SecondaryBackgroundColor`.
    static let secondaryBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryBackgroundColor")
    /// Color `SecondaryTextColor`.
    static let secondaryTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondaryTextColor")
    /// Color `TextColor`.
    static let textColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondaryTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BackgroundColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SecondaryBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondaryBackgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondaryBackgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SecondaryTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondaryTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondaryTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 23 files.
  struct file {
    /// Resource file `Archivo-Black.ttf`.
    static let archivoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-Black", pathExtension: "ttf")
    /// Resource file `Archivo-Bold.ttf`.
    static let archivoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-Bold", pathExtension: "ttf")
    /// Resource file `Archivo-ExtraBold.ttf`.
    static let archivoExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-ExtraBold", pathExtension: "ttf")
    /// Resource file `Archivo-ExtraLight.ttf`.
    static let archivoExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-ExtraLight", pathExtension: "ttf")
    /// Resource file `Archivo-Light.ttf`.
    static let archivoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-Light", pathExtension: "ttf")
    /// Resource file `Archivo-Medium.ttf`.
    static let archivoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-Medium", pathExtension: "ttf")
    /// Resource file `Archivo-Regular.ttf`.
    static let archivoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-Regular", pathExtension: "ttf")
    /// Resource file `Archivo-SemiBold.ttf`.
    static let archivoSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-SemiBold", pathExtension: "ttf")
    /// Resource file `Archivo-Thin.ttf`.
    static let archivoThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Archivo-Thin", pathExtension: "ttf")
    /// Resource file `Details.png`.
    static let detailsPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Details", pathExtension: "png")
    /// Resource file `Lato-Black.ttf`.
    static let latoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Black", pathExtension: "ttf")
    /// Resource file `Lato-Bold.ttf`.
    static let latoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Bold", pathExtension: "ttf")
    /// Resource file `Lato-Regular.ttf`.
    static let latoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Regular", pathExtension: "ttf")
    /// Resource file `Main List.png`.
    static let mainListPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Main List", pathExtension: "png")
    /// Resource file `Rubik-Black.ttf`.
    static let rubikBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Black", pathExtension: "ttf")
    /// Resource file `Rubik-Bold.ttf`.
    static let rubikBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Bold", pathExtension: "ttf")
    /// Resource file `Rubik-ExtraBold.ttf`.
    static let rubikExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-ExtraBold", pathExtension: "ttf")
    /// Resource file `Rubik-Light.ttf`.
    static let rubikLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Light", pathExtension: "ttf")
    /// Resource file `Rubik-Medium.ttf`.
    static let rubikMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Medium", pathExtension: "ttf")
    /// Resource file `Rubik-Regular.ttf`.
    static let rubikRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Regular", pathExtension: "ttf")
    /// Resource file `Rubik-SemiBold.ttf`.
    static let rubikSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-SemiBold", pathExtension: "ttf")
    /// Resource file `Second Details.png`.
    static let secondDetailsPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Second Details", pathExtension: "png")
    /// Resource file `ShareTech-Regular.ttf`.
    static let shareTechRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "ShareTech-Regular", pathExtension: "ttf")

    /// `bundle.url(forResource: "Archivo-Black", withExtension: "ttf")`
    static func archivoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Archivo-Bold", withExtension: "ttf")`
    static func archivoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Archivo-ExtraBold", withExtension: "ttf")`
    static func archivoExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Archivo-ExtraLight", withExtension: "ttf")`
    static func archivoExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Archivo-Light", withExtension: "ttf")`
    static func archivoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Archivo-Medium", withExtension: "ttf")`
    static func archivoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Archivo-Regular", withExtension: "ttf")`
    static func archivoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Archivo-SemiBold", withExtension: "ttf")`
    static func archivoSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Archivo-Thin", withExtension: "ttf")`
    static func archivoThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.archivoThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Details", withExtension: "png")`
    static func detailsPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.detailsPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-Black", withExtension: "ttf")`
    static func latoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-Bold", withExtension: "ttf")`
    static func latoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-Regular", withExtension: "ttf")`
    static func latoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Main List", withExtension: "png")`
    static func mainListPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mainListPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Black", withExtension: "ttf")`
    static func rubikBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Bold", withExtension: "ttf")`
    static func rubikBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-ExtraBold", withExtension: "ttf")`
    static func rubikExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Light", withExtension: "ttf")`
    static func rubikLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Medium", withExtension: "ttf")`
    static func rubikMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Regular", withExtension: "ttf")`
    static func rubikRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-SemiBold", withExtension: "ttf")`
    static func rubikSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Second Details", withExtension: "png")`
    static func secondDetailsPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.secondDetailsPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ShareTech-Regular", withExtension: "ttf")`
    static func shareTechRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.shareTechRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 20 fonts.
  struct font: Rswift.Validatable {
    /// Font `Archivo-Black`.
    static let archivoBlack = Rswift.FontResource(fontName: "Archivo-Black")
    /// Font `Archivo-Bold`.
    static let archivoBold = Rswift.FontResource(fontName: "Archivo-Bold")
    /// Font `Archivo-ExtraBold`.
    static let archivoExtraBold = Rswift.FontResource(fontName: "Archivo-ExtraBold")
    /// Font `Archivo-ExtraLight`.
    static let archivoExtraLight = Rswift.FontResource(fontName: "Archivo-ExtraLight")
    /// Font `Archivo-Light`.
    static let archivoLight = Rswift.FontResource(fontName: "Archivo-Light")
    /// Font `Archivo-Medium`.
    static let archivoMedium = Rswift.FontResource(fontName: "Archivo-Medium")
    /// Font `Archivo-Regular`.
    static let archivoRegular = Rswift.FontResource(fontName: "Archivo-Regular")
    /// Font `Archivo-SemiBold`.
    static let archivoSemiBold = Rswift.FontResource(fontName: "Archivo-SemiBold")
    /// Font `Archivo-Thin`.
    static let archivoThin = Rswift.FontResource(fontName: "Archivo-Thin")
    /// Font `Lato-Black`.
    static let latoBlack = Rswift.FontResource(fontName: "Lato-Black")
    /// Font `Lato-Bold`.
    static let latoBold = Rswift.FontResource(fontName: "Lato-Bold")
    /// Font `Lato-Regular`.
    static let latoRegular = Rswift.FontResource(fontName: "Lato-Regular")
    /// Font `Rubik-Black`.
    static let rubikBlack = Rswift.FontResource(fontName: "Rubik-Black")
    /// Font `Rubik-Bold`.
    static let rubikBold = Rswift.FontResource(fontName: "Rubik-Bold")
    /// Font `Rubik-ExtraBold`.
    static let rubikExtraBold = Rswift.FontResource(fontName: "Rubik-ExtraBold")
    /// Font `Rubik-Light`.
    static let rubikLight = Rswift.FontResource(fontName: "Rubik-Light")
    /// Font `Rubik-Medium`.
    static let rubikMedium = Rswift.FontResource(fontName: "Rubik-Medium")
    /// Font `Rubik-Regular`.
    static let rubikRegular = Rswift.FontResource(fontName: "Rubik-Regular")
    /// Font `Rubik-SemiBold`.
    static let rubikSemiBold = Rswift.FontResource(fontName: "Rubik-SemiBold")
    /// Font `ShareTech-Regular`.
    static let shareTechRegular = Rswift.FontResource(fontName: "ShareTech-Regular")

    /// `UIFont(name: "Archivo-Black", size: ...)`
    static func archivoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoBlack, size: size)
    }

    /// `UIFont(name: "Archivo-Bold", size: ...)`
    static func archivoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoBold, size: size)
    }

    /// `UIFont(name: "Archivo-ExtraBold", size: ...)`
    static func archivoExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoExtraBold, size: size)
    }

    /// `UIFont(name: "Archivo-ExtraLight", size: ...)`
    static func archivoExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoExtraLight, size: size)
    }

    /// `UIFont(name: "Archivo-Light", size: ...)`
    static func archivoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoLight, size: size)
    }

    /// `UIFont(name: "Archivo-Medium", size: ...)`
    static func archivoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoMedium, size: size)
    }

    /// `UIFont(name: "Archivo-Regular", size: ...)`
    static func archivoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoRegular, size: size)
    }

    /// `UIFont(name: "Archivo-SemiBold", size: ...)`
    static func archivoSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoSemiBold, size: size)
    }

    /// `UIFont(name: "Archivo-Thin", size: ...)`
    static func archivoThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: archivoThin, size: size)
    }

    /// `UIFont(name: "Lato-Black", size: ...)`
    static func latoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoBlack, size: size)
    }

    /// `UIFont(name: "Lato-Bold", size: ...)`
    static func latoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoBold, size: size)
    }

    /// `UIFont(name: "Lato-Regular", size: ...)`
    static func latoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoRegular, size: size)
    }

    /// `UIFont(name: "Rubik-Black", size: ...)`
    static func rubikBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikBlack, size: size)
    }

    /// `UIFont(name: "Rubik-Bold", size: ...)`
    static func rubikBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikBold, size: size)
    }

    /// `UIFont(name: "Rubik-ExtraBold", size: ...)`
    static func rubikExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikExtraBold, size: size)
    }

    /// `UIFont(name: "Rubik-Light", size: ...)`
    static func rubikLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikLight, size: size)
    }

    /// `UIFont(name: "Rubik-Medium", size: ...)`
    static func rubikMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikMedium, size: size)
    }

    /// `UIFont(name: "Rubik-Regular", size: ...)`
    static func rubikRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikRegular, size: size)
    }

    /// `UIFont(name: "Rubik-SemiBold", size: ...)`
    static func rubikSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikSemiBold, size: size)
    }

    /// `UIFont(name: "ShareTech-Regular", size: ...)`
    static func shareTechRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: shareTechRegular, size: size)
    }

    static func validate() throws {
      if R.font.archivoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-Black' could not be loaded, is 'Archivo-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.archivoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-Bold' could not be loaded, is 'Archivo-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.archivoExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-ExtraBold' could not be loaded, is 'Archivo-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.archivoExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-ExtraLight' could not be loaded, is 'Archivo-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.archivoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-Light' could not be loaded, is 'Archivo-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.archivoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-Medium' could not be loaded, is 'Archivo-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.archivoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-Regular' could not be loaded, is 'Archivo-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.archivoSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-SemiBold' could not be loaded, is 'Archivo-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.archivoThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Archivo-Thin' could not be loaded, is 'Archivo-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Black' could not be loaded, is 'Lato-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Bold' could not be loaded, is 'Lato-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Regular' could not be loaded, is 'Lato-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Black' could not be loaded, is 'Rubik-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Bold' could not be loaded, is 'Rubik-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-ExtraBold' could not be loaded, is 'Rubik-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Light' could not be loaded, is 'Rubik-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Medium' could not be loaded, is 'Rubik-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Regular' could not be loaded, is 'Rubik-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-SemiBold' could not be loaded, is 'Rubik-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.shareTechRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ShareTech-Regular' could not be loaded, is 'ShareTech-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `Details`.
    static let details = Rswift.ImageResource(bundle: R.hostingBundle, name: "Details")
    /// Image `LaunchScreenIcon`.
    static let launchScreenIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchScreenIcon")
    /// Image `Main List`.
    static let mainList = Rswift.ImageResource(bundle: R.hostingBundle, name: "Main List")
    /// Image `Placeholder1`.
    static let placeholder1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Placeholder1")
    /// Image `Placeholder2`.
    static let placeholder2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Placeholder2")
    /// Image `Placeholder3`.
    static let placeholder3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Placeholder3")
    /// Image `Placeholder4`.
    static let placeholder4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Placeholder4")
    /// Image `Placeholder5`.
    static let placeholder5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Placeholder5")
    /// Image `Placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "Placeholder")
    /// Image `Second Details`.
    static let secondDetails = Rswift.ImageResource(bundle: R.hostingBundle, name: "Second Details")
    /// Image `Title`.
    static let title = Rswift.ImageResource(bundle: R.hostingBundle, name: "Title")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Details", bundle: ..., traitCollection: ...)`
    static func details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.details, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LaunchScreenIcon", bundle: ..., traitCollection: ...)`
    static func launchScreenIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchScreenIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Main List", bundle: ..., traitCollection: ...)`
    static func mainList(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainList, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Placeholder1", bundle: ..., traitCollection: ...)`
    static func placeholder1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Placeholder2", bundle: ..., traitCollection: ...)`
    static func placeholder2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Placeholder3", bundle: ..., traitCollection: ...)`
    static func placeholder3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Placeholder4", bundle: ..., traitCollection: ...)`
    static func placeholder4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Placeholder5", bundle: ..., traitCollection: ...)`
    static func placeholder5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Second Details", bundle: ..., traitCollection: ...)`
    static func secondDetails(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.secondDetails, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Title", bundle: ..., traitCollection: ...)`
    static func title(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.title, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 14 localization keys.
    struct localizable {
      /// en translation: About
      ///
      /// Locales: en
      static let about = Rswift.StringResource(key: "About", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: All
      ///
      /// Locales: en
      static let all = Rswift.StringResource(key: "All", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Dismiss
      ///
      /// Locales: en
      static let dismiss = Rswift.StringResource(key: "Dismiss", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Explore
      ///
      /// Locales: en
      static let explore = Rswift.StringResource(key: "Explore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Latest Photos
      ///
      /// Locales: en
      static let latestPhotos = Rswift.StringResource(key: "Latest Photos", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Launches
      ///
      /// Locales: en
      static let launches = Rswift.StringResource(key: "Launches", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Network Issue
      ///
      /// Locales: en
      static let networkIssue = Rswift.StringResource(key: "Network Issue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Recent
      ///
      /// Locales: en
      static let recent = Rswift.StringResource(key: "Recent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Rockets
      ///
      /// Locales: en
      static let rockets = Rswift.StringResource(key: "Rockets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Scheduled
      ///
      /// Locales: en
      static let scheduled = Rswift.StringResource(key: "Scheduled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Show all
      ///
      /// Locales: en
      static let showAll = Rswift.StringResource(key: "Show all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unable to connect to server. Check your network connection.
      ///
      /// Locales: en
      static let unableToConnect = Rswift.StringResource(key: "Unable to connect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Unknown
      ///
      /// Locales: en
      static let unknown = Rswift.StringResource(key: "Unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: About
      ///
      /// Locales: en
      static func about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About"
        }

        return NSLocalizedString("About", bundle: bundle, comment: "")
      }

      /// en translation: All
      ///
      /// Locales: en
      static func all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("All", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "All"
        }

        return NSLocalizedString("All", bundle: bundle, comment: "")
      }

      /// en translation: Dismiss
      ///
      /// Locales: en
      static func dismiss(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dismiss", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dismiss"
        }

        return NSLocalizedString("Dismiss", bundle: bundle, comment: "")
      }

      /// en translation: Explore
      ///
      /// Locales: en
      static func explore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Explore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Explore"
        }

        return NSLocalizedString("Explore", bundle: bundle, comment: "")
      }

      /// en translation: Latest Photos
      ///
      /// Locales: en
      static func latestPhotos(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Latest Photos", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Latest Photos"
        }

        return NSLocalizedString("Latest Photos", bundle: bundle, comment: "")
      }

      /// en translation: Launches
      ///
      /// Locales: en
      static func launches(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Launches", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Launches"
        }

        return NSLocalizedString("Launches", bundle: bundle, comment: "")
      }

      /// en translation: Network Issue
      ///
      /// Locales: en
      static func networkIssue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Network Issue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Network Issue"
        }

        return NSLocalizedString("Network Issue", bundle: bundle, comment: "")
      }

      /// en translation: Recent
      ///
      /// Locales: en
      static func recent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Recent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Recent"
        }

        return NSLocalizedString("Recent", bundle: bundle, comment: "")
      }

      /// en translation: Rockets
      ///
      /// Locales: en
      static func rockets(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rockets", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rockets"
        }

        return NSLocalizedString("Rockets", bundle: bundle, comment: "")
      }

      /// en translation: Scheduled
      ///
      /// Locales: en
      static func scheduled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Scheduled", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Scheduled"
        }

        return NSLocalizedString("Scheduled", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: Show all
      ///
      /// Locales: en
      static func showAll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Show all", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Show all"
        }

        return NSLocalizedString("Show all", bundle: bundle, comment: "")
      }

      /// en translation: Unable to connect to server. Check your network connection.
      ///
      /// Locales: en
      static func unableToConnect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unable to connect", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unable to connect"
        }

        return NSLocalizedString("Unable to connect", bundle: bundle, comment: "")
      }

      /// en translation: Unknown
      ///
      /// Locales: en
      static func unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unknown"
        }

        return NSLocalizedString("Unknown", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "LaunchScreenIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LaunchScreenIcon' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgroundColor' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
